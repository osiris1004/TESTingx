Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DIVIDE
    MINUS

Grammar

Rule 0     S' -> start
Rule 1     start -> expression
Rule 2     expression -> expression PLUS expression
Rule 3     expression -> expression TIMES expression
Rule 4     expression -> LPAREN expression RPAREN
Rule 5     expression -> NUMBER

Terminals, with rules where they appear

DIVIDE               : 
LPAREN               : 4
MINUS                : 
NUMBER               : 5
PLUS                 : 2
RPAREN               : 4
TIMES                : 3
error                : 

Nonterminals, with rules where they appear

expression           : 1 2 2 3 3 4
start                : 0

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . expression
    (2) expression -> . expression PLUS expression
    (3) expression -> . expression TIMES expression
    (4) expression -> . LPAREN expression RPAREN
    (5) expression -> . NUMBER

    LPAREN          shift and go to state 3
    NUMBER          shift and go to state 4

    start                          shift and go to state 1
    expression                     shift and go to state 2

state 1

    (0) S' -> start .



state 2

    (1) start -> expression .
    (2) expression -> expression . PLUS expression
    (3) expression -> expression . TIMES expression

    $end            reduce using rule 1 (start -> expression .)
    PLUS            shift and go to state 5
    TIMES           shift and go to state 6


state 3

    (4) expression -> LPAREN . expression RPAREN
    (2) expression -> . expression PLUS expression
    (3) expression -> . expression TIMES expression
    (4) expression -> . LPAREN expression RPAREN
    (5) expression -> . NUMBER

    LPAREN          shift and go to state 3
    NUMBER          shift and go to state 4

    expression                     shift and go to state 7

state 4

    (5) expression -> NUMBER .

    PLUS            reduce using rule 5 (expression -> NUMBER .)
    TIMES           reduce using rule 5 (expression -> NUMBER .)
    $end            reduce using rule 5 (expression -> NUMBER .)
    RPAREN          reduce using rule 5 (expression -> NUMBER .)


state 5

    (2) expression -> expression PLUS . expression
    (2) expression -> . expression PLUS expression
    (3) expression -> . expression TIMES expression
    (4) expression -> . LPAREN expression RPAREN
    (5) expression -> . NUMBER

    LPAREN          shift and go to state 3
    NUMBER          shift and go to state 4

    expression                     shift and go to state 8

state 6

    (3) expression -> expression TIMES . expression
    (2) expression -> . expression PLUS expression
    (3) expression -> . expression TIMES expression
    (4) expression -> . LPAREN expression RPAREN
    (5) expression -> . NUMBER

    LPAREN          shift and go to state 3
    NUMBER          shift and go to state 4

    expression                     shift and go to state 9

state 7

    (4) expression -> LPAREN expression . RPAREN
    (2) expression -> expression . PLUS expression
    (3) expression -> expression . TIMES expression

    RPAREN          shift and go to state 10
    PLUS            shift and go to state 5
    TIMES           shift and go to state 6


state 8

    (2) expression -> expression PLUS expression .
    (2) expression -> expression . PLUS expression
    (3) expression -> expression . TIMES expression

    PLUS            reduce using rule 2 (expression -> expression PLUS expression .)
    $end            reduce using rule 2 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 2 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 6

  ! TIMES           [ reduce using rule 2 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 5 ]


state 9

    (3) expression -> expression TIMES expression .
    (2) expression -> expression . PLUS expression
    (3) expression -> expression . TIMES expression

    PLUS            reduce using rule 3 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 3 (expression -> expression TIMES expression .)
    $end            reduce using rule 3 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 3 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 5 ]
  ! TIMES           [ shift and go to state 6 ]


state 10

    (4) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 4 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 4 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 4 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 4 (expression -> LPAREN expression RPAREN .)

